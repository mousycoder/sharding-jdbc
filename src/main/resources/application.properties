spring.application.name=mousycoder-sharding-jdbc
server.port=8080

logging.level.root=INFO
# 打印执行的数据库以及语句
spring.shardingsphere.props.sql.show=true

# 数据源 db0
spring.shardingsphere.datasource.names=ds0,ds1
# 第一个数据库
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/mousycoder_shop_order_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=Aa123456789

# 第二个数据库
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/mousycoder_shop_order_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=Aa123456789


# 配置数据节点
spring.shardingsphere.sharding.tables.product_order_item.actualDataNodes=ds$->{0..1}.product_order_item_$->{0..1}
spring.shardingsphere.sharding.tables.product_order.actualDataNodes=ds0.product_order_$->{0..1}

# 配置 ad_config 为广播表
spring.shardingsphere.sharding.broadcast-tables[]=ad_config

# 配置绑定表
spring.shardingsphere.sharding.binding-tables[0]=product_order,product_order_item

# 配置id生成策略以及雪花的 workerId
spring.shardingsphere.sharding.tables.product_order.key-generator.props.worker.id=1
spring.shardingsphere.sharding.tables.product_order.key-generator.column=id
spring.shardingsphere.sharding.tables.product_order.key-generator.type=SNOWFLAKE

spring.shardingsphere.sharding.tables.ad_config.key-generator.column=id
spring.shardingsphere.sharding.tables.ad_config.key-generator.type=SNOWFLAKE


# 【inline】表达式配置默认分库策略
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}

# 【inline】表达式配置 product_order 分库策略
#spring.shardingsphere.sharding.tables.product_order.databaseStrategy.inline.shardingColumn=user_id
#spring.shardingsphere.sharding.tables.product_order.databaseStrategy.inline.algorithmExpression=ds$->{user_id % 2}

# 【inline】表达式配置 product_order 分表策略
#spring.shardingsphere.sharding.tables.product_order.tableStrategy.inline.shardingColumn=id
#spring.shardingsphere.sharding.tables.product_order.tableStrategy.inline.algorithmExpression=product_order_$->{(id % 1)}

# 【inline】表达式配置 product_order_item 分表策略
#spring.shardingsphere.sharding.tables.product_order_item.tableStrategy.inline.shardingColumn=product_order_id
#spring.shardingsphere.sharding.tables.product_order_item.tableStrategy.inline.algorithmExpression=product_order_item_$->{product_order_id % 2}


# 【精准分片】分库策略 (根据 user_id 分库 用于 = IN 查询)
#spring.shardingsphere.sharding.tables.product_order.databaseStrategy.standard.shardingColumn=user_id
#spring.shardingsphere.sharding.tables.product_order.databaseStrategy.standard.preciseAlgorithmClassName=com.mousycoder.strategy.CustomDBPreciseShardingAlgorithm

#【精准分片】分表策略（ 根据 订单表的id 分表 用于 = IN 查询）
#spring.shardingsphere.sharding.tables.product_order.table-strategy.standard.sharding-column=id
spring.shardingsphere.sharding.tables.product_order.table-strategy.standard.precise-algorithm-class-name=com.mousycoder.strategy.CustomTablePreciseShardingAlgorithm


#【精准分片】分表策略 (根据 订单id range 分表,用于支持 BETWEEN AND) 前提一定要开启 = IN 的分表策略
spring.shardingsphere.sharding.tables.product_order.table-strategy.standard.sharding-column=id
spring.shardingsphere.sharding.tables.product_order.table-strategy.standard.rangeAlgorithmClassName= com.mousycoder.strategy.CustomTableRangeShardingAlgorithm

# 【复合分片】分表策略（根据 订单id,user_id 一起分表 例如 product_order_1_0）
#spring.shardingsphere.sharding.tables.product_order.table-strategy.complex.shardingColumns=id,user_id
#spring.shardingsphere.sharding.tables.product_order.table-strategy.complex.algorithmClassName=com.mousycoder.strategy.CustomComplexKeysShardingAlgorithm

# 【HIT分片】分库分表策略（根据 hintManager.addDatabaseShardingValue("product_order",3L);指定库和 hintManager.addTableShardingValue("product_order",8L); 指定表）
#spring.shardingsphere.sharding.tables.product_order.databaseStrategy.hint.algorithmClassName=com.mousycoder.strategy.CustomDBHintShardingAlgorithm
#spring.shardingsphere.sharding.tables.product_order.tableStrategy.hint.algorithmClassName=com.mousycoder.strategy.CustomTableHintShardingAlgorithm